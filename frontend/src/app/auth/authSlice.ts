import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { authLogin, authToken } from './authAPI';

export interface AuthState {
  user: any;
  token: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: AuthState = {
  user: {},
  token: '',
  status: 'idle',
};

export const loginAsync = createAsyncThunk(
  'auth/login',
  async (loginInfo: { email: string; password: string }) => {
    const response = await authLogin(loginInfo);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  },
);

export const verifyTokenAsync = createAsyncThunk('auth/token', async () => {
  const token = localStorage.getItem('token');
  if (token) {
    const response = await authToken(token);
    return response.data;
  }
  return null;
});

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: state => {
      localStorage.removeItem('token');
      state.user = {};
      state.token = '';
      state.status = 'idle';
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(loginAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.user = action.payload.user;
        state.token = action.payload.token;
        localStorage.setItem('token', action.payload.token);
      })
      .addCase(loginAsync.rejected, (state, action) => {
        state.status = 'failed';
      })
      .addCase(verifyTokenAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(verifyTokenAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.user = action.payload.user;
        state.token = action.payload.token;
        localStorage.setItem('token', action.payload.token);
      })
      .addCase(verifyTokenAsync.rejected, (state, action) => {
        state.status = 'failed';
      });
  },
});

export const { logout } = authSlice.actions;

export const selectAuth = (state: RootState) => state.auth;

export default authSlice.reducer;
